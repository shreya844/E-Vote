import java.io.DataInputStream;
import java.io.IOException;
import java.util.Arrays;

class LazyLoading {

    static class Reader {

        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) {
                buffer[0] = -1;
            }
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead) {
                fillBuffer();
            }
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null) {
                return;
            }
            din.close();
        }
    }

    public static void main(String[] args) throws IOException {
        Reader s = new Reader();
        int T = s.nextInt();
        int j = 1;
        while (T-- > 0) {
            
            int N = s.nextInt();
            int arr[] = new int[N];
            for (int i = 0; i < N; i++) {
                arr[i] = s.nextInt();
            }
            Arrays.sort(arr);
            int minIndex = 0;
            int maxIndex = N - 1;
            int trip = 0;
            while (maxIndex >= minIndex && arr[maxIndex] >= 50) {
                trip++;
                maxIndex--;
            }

            //if all elements are greater than 50
            if (maxIndex < minIndex) {
                System.out.println("Case #" + j + ": " + trip);
                j++;
                continue;
            }

           //now elements left are of weight less than 50
            //so lets calculate how many elements required to be carried in a bag..corresponding to it..
            while (minIndex <= maxIndex) //Some loop to be introduced here
            {
                int numberOfElementsRequired = (int) (Math.ceil(50.0 / arr[maxIndex]));
                //now check this many element are available or not
                int numberOfElementsAvailable = maxIndex - minIndex + 1;
                //if sufficient amount of elements are available we increase trip and adjust maxIndex as well as minIndex,otherwise terminate

                if (numberOfElementsAvailable >= numberOfElementsRequired) {
                    trip++;
                    maxIndex--;
                    minIndex += numberOfElementsRequired - 1; 
                }
                else
                {
                    break;
                }
            }
            System.out.println("Case #" + j + ": " + trip);
            j++;
        }

    }
}
